
#include <iostream>
#include<bits/stdc++.h>
using namespace std;
vector<pair<int,pair<int,int>>> Kruskal(vector<pair<int,pair<int,int>>>&G,int e,vector<int>&parent);
int find(int u,vector<int>&parent);
void unionVert(int u,int v,vector<int>&parent);

int main()
{
    vector<pair<int,pair<int,int>>>G,r;
    int e,u,w,v,vet;
    cout<<"Enter number of edges";
    cin>>e;
    cout<<"Enter number of vertices";
    cin>>vet;
    for(int i=0;i<e;i++)
    {
        cout<<"Enter connected verties";
        cin>>u>>v;
        cout<<"Enter edge weight";
        cin>>w;
        G.push_back(make_pair(w,make_pair(u,v)));
    }
    vector<int>parent;
    for(int i=0;i<vet;i++)
        parent.push_back(i);
    r=Kruskal(G,e,parent);
    for(int i=0;i<vet-1;i++)
    {
        cout<<r[i].second.first<<"\t"<<r[i].second.second<<"\t"<<r[i].first<<endl;
    }
    return 0;
}
vector<pair<int,pair<int,int>>> Kruskal(vector<pair<int,pair<int,int>>>&G,int e,vector<int>&parent)
{
    vector<pair<int,pair<int,int>>>result;
    int u,v;
    sort(G.begin(),G.end());
    for(int i=0;i<G.size();i++)
    {
        u=G[i].second.first;
        v=G[i].second.second;
        if(find(u,parent)!=find(v,parent))
        {
            result.push_back(G[i]);
            unionVert(u,v,parent);
        }
    }
    return result;
}
int find(int u,vector<int>&parent)
{
    if(parent[u]==u)
    return u ;
    int re=find(parent[u],parent);
    parent[u]=re;
    return re;
}

void unionVert(int u,int v,vector<int>&parent)
{
    int pu=find(u,parent);
    int pv=find(v,parent);
    parent[pv]=pu;
}



