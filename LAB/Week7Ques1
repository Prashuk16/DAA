#include<iostream>
#include<bits/stdc++.h>
using namespace std;
void prims(vector<vector<pair<int,int>>>&G,int v,int e)
{
    vector<int>parent(v,-1),fixed(v,0),wt(v,INT_MAX);
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    pq.push(make_pair(0,0));
    wt[0]=0;
    parent[0]=0;
    int weight=0;
    while(!pq.empty())
    {
        int u=pq.top().second;
        int w=pq.top().first;
        fixed[u]=1;
        pq.pop();
        for(auto k:G[u])
        {
            if(!fixed[k.first]&&wt[k.first]>k.second)
            {
                wt[k.first]=k.second;
                pq.push(make_pair(wt[k.first],k.first));
                parent[k.first]=u;
            }
        }
    }
    for(auto x:wt)
    {
        weight+=x;
    }
    cout<<"Weight"<<weight<<endl; 
}
int main()
{
    int v,e,vet,w;
    cout<<"Enter number of vertices";
    cin>>v;
    vector<vector<pair<int,int>>>G;
    for(int i=0;i<v;i++)
    {
        cout<<"Enter number of edges connecting vertkces through "<<i<<" ";
         cin>>e;
        vector<pair<int,int>>temp;
        for(int j=0;j<e;j++)
        {
            cout<<"Enter the connected vertix";
            cin>>vet;
            cout<<"Enter the weight";
            cin>>w;
            temp.push_back(make_pair(vet,w));
        }
        G.push_back(temp);
    }
    prims(G,v,e);
}
